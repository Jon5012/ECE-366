module FullAdder (
  output S, Cout,
  input A, B, Cin
);

  wire sum_intermediate, carry_intermediate;

  assign sum_intermediate = A ^ B;
  assign S = sum_intermediate ^ Cin;

  assign carry_intermediate = A & B;
  assign Cout = carry_intermediate | (Cin & sum_intermediate);

endmodule

module FourBitRippleV2 (
  output [3:0] sum,
  output carry_out,
  input [3:0] a,
  input [3:0] b,
  input carry_in
);

  wire [3:0] carry;
  wire [3:0] s;

  FullAdder fa0 (s[0], carry[0], a[0], b[0], carry_in);
  FullAdder fa1 (s[1], carry[1], a[1], b[1], carry[0]);
  FullAdder fa2 (s[2], carry[2], a[2], b[2], carry[1]);
  FullAdder fa3 (s[3], carry[3], a[3], b[3], carry[2]);

  assign sum = s;
  assign carry_out = carry[3];

endmodule

module Propagate (
  output P,
  input [3:0] a,
  input [3:0] b
);

  assign P = (a[0] | b[0]) & (a[1] | b[1]) & (a[2] | b[2]) & (a[3] | b[3]);

endmodule

module Generate (
  output G,
  input [3:0] a,
  input [3:0] b
);

  assign G = (a[3] & b[3]) | ((a[3] | b[3]) & (a[2] & b[2])) |
             ((a[3] | b[3]) & (a[2] | b[2]) & (a[1] & b[1])) |
             ((a[3] | b[3]) & (a[2] | b[2]) & (a[1] | b[1]) & (a[0] & b[0]));

endmodule

module FourBitCLA (
  output carry_out,
  input [3:0] a,
  input [3:0] b,
  input carry_in
);

  wire G, P;
  wire carry;

  Generate gen (G, a, b);
  Propagate prop (P, a, b);

  assign carry = G | (P & carry_in);
  assign carry_out = carry;

endmodule

module ThirtyTwoBitCLA (
  output [31:0] sum,
  output carry_out,
  input [31:0] a,
  input [31:0] b
);

  wire [7:0] carry;
  wire [31:0] s;

  assign carry[0] = 1'b0;

  FourBitCLA cla0 (carry[1], a[3:0], b[3:0], carry[0]);
  FourBitRippleV2 ripple0 (s[3:0], , a[3:0], b[3:0], carry[0]);

  FourBitCLA cla1 (carry[2], a[7:4], b[7:4], carry[1]);
  FourBitRippleV2 ripple1 (s[7:4], , a[7:4], b[7:4], carry[1]);

  FourBitCLA cla2 (carry[3], a[11:8], b[11:8], carry[2]);
  FourBitRippleV2 ripple2 (s[11:8], , a[11:8], b[11:8], carry[2]);

  FourBitCLA cla3 (carry[4], a[15:12], b[15:12], carry[3]);
  FourBitRippleV2 ripple3 (s[15:12], , a[15:12], b[15:12], carry[3]);

  FourBitCLA cla4 (carry[5], a[19:16], b[19:16], carry[4]);
  FourBitRippleV2 ripple4 (s[19:16], , a[19:16], b[19:16], carry[4]);

  FourBitCLA cla5 (carry[6], a[23:20], b[23:20], carry[5]);
  FourBitRippleV2 ripple5 (s[23:20], , a[23:20], b[23:20], carry[5]);

  FourBitCLA cla6 (carry[7], a[27:24], b[27:24], carry[6]);
  FourBitRippleV2 ripple6 (s[27:24], , a[27:24], b[27:24], carry[6]);

  FourBitCLA cla7 (carry_out, a[31:28], b[31:28], carry[7]);
  FourBitRippleV2 ripple7 (s[31:28], , a[31:28], b[31:28], carry[7]);

  assign sum = s;

endmodule
